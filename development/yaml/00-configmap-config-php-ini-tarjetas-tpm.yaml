kind: ConfigMap
apiVersion: v1
metadata:
  name: config-php-ini-tarjetas-tpm
  namespace: tarjetas-tpm
data:
  00-documentroot.conf: DocumentRoot "/opt/app-root/src/"
  10-opcache.ini: "; Enable Zend OPcache extension module\r\nzend_extension=opcache.so\r\n\r\n; Determines if Zend OPCache is enabled\r\nopcache.enable=1\r\n\r\n; Determines if Zend OPCache is enabled for the CLI version of PHP\r\n;opcache.enable_cli=0\r\n\r\n; The OPcache shared memory storage size.\r\nopcache.memory_consumption=128\r\n\r\n; The amount of memory for interned strings in Mbytes.\r\nopcache.interned_strings_buffer=8\r\n\r\n; The maximum number of keys (scripts) in the OPcache hash table.\r\n; Only numbers between 200 and 1000000 are allowed.\r\nopcache.max_accelerated_files=4000\r\n\r\n; The maximum percentage of \"wasted\" memory until a restart is scheduled.\r\n;opcache.max_wasted_percentage=5\r\n\r\n; When this directive is enabled, the OPcache appends the current working\r\n; directory to the script key, thus eliminating possible collisions between\r\n; files with the same name (basename). Disabling the directive improves\r\n; performance, but may break existing applications.\r\n;opcache.use_cwd=1\r\n\r\n; When disabled, you must reset the OPcache manually or restart the\r\n; webserver for changes to the filesystem to take effect.\r\n;opcache.validate_timestamps=1\r\n\r\n; How often (in seconds) to check file timestamps for changes to the shared\r\n; memory storage allocation. (\"1\" means validate once per second, but only\r\n; once per request. \"0\" means always validate)\r\nopcache.revalidate_freq=2\r\n\r\n; Enables or disables file search in include_path optimization\r\n;opcache.revalidate_path=0\r\n\r\n; If disabled, all PHPDoc comments are dropped from the code to reduce the\r\n; size of the optimized code.\r\n;opcache.save_comments=1\r\n\r\n; If enabled, a fast shutdown sequence is used for the accelerated code\r\n; Depending on the used Memory Manager this may cause some incompatibilities.\r\n;opcache.fast_shutdown=0\r\n\r\n; Allow file existence override (file_exists, etc.) performance feature.\r\n;opcache.enable_file_override=0\r\n\r\n; A bitmask, where each bit enables or disables the appropriate OPcache\r\n; passes\r\n;opcache.optimization_level=0xffffffff\r\n\r\n;opcache.inherited_hack=1\r\n;opcache.dups_fix=0\r\n\r\n; The location of the OPcache blacklist file (wildcards allowed).\r\n; Each OPcache blacklist file is a text file that holds the names of files\r\n; that should not be accelerated.\r\nopcache.blacklist_filename=/etc/php.d/opcache*.blacklist\r\n\r\n; Allows exclusion of large files from being cached. By default all files\r\n; are cached.\r\nopcache.max_file_size=1M\r\n\r\n; Check the cache checksum each N requests.\r\n; The default value of \"0\" means that the checks are disabled.\r\n;opcache.consistency_checks=0\r\n\r\n; How long to wait (in seconds) for a scheduled restart to begin if the cache\r\n; is not being accessed.\r\n;opcache.force_restart_timeout=180\r\n\r\n; OPcache error_log file name. Empty string assumes \"stderr\".\r\n;opcache.error_log=\r\n\r\n; All OPcache errors go to the Web server log.\r\n; By default, only fatal errors (level 0) or errors (level 1) are logged.\r\n; You can also enable warnings (level 2), info messages (level 3) or\r\n; debug messages (level 4).\r\n;opcache.log_verbosity_level=1\r\n\r\n; Preferred Shared Memory back-end. Leave empty and let the system decide.\r\n;opcache.preferred_memory_model=\r\n\r\n; Protect the shared memory from unexpected writing during script execution.\r\n; Useful for internal debugging only.\r\n;opcache.protect_memory=0\r\n\r\n; Allows calling OPcache API functions only from PHP scripts which path is\r\n; started from specified string. The default \"\" means no restriction\r\n;opcache.restrict_api=\r\n\r\n; Enables and sets the second level cache directory.\r\n; It should improve performance when SHM memory is full, at server restart or\r\n; SHM reset. The default \"\" disables file based caching.\r\n; RPM note : file cache directory must be owned by process owner\r\n;   for mod_php, see /etc/httpd/conf.d/php.conf\r\n;   for php-fpm, see /etc/php-fpm.d/*conf\r\n;opcache.file_cache=\r\n\r\n; Enables or disables opcode caching in shared memory.\r\n;opcache.file_cache_only=0\r\n\r\n; Enables or disables checksum validation when script loaded from file cache.\r\n;opcache.file_cache_consistency_checks=1\r\n\r\n\r\n; Enables or disables copying of PHP code (text segment) into HUGE PAGES.\r\n; This should improve performance, but requires appropriate OS configuration.\r\n;opcache.huge_code_pages=0"
  50-mpm-tuning.conf: "<IfModule mpm_prefork_module>\r\n    # This value should mirror what is set in MinSpareServers.\r\n    StartServers          8\r\n    MinSpareServers       8\r\n    MaxSpareServers       18\r\n    # The MaxRequestWorkers directive sets the limit on the number of simultaneous requests that will be served.\r\n    # The default value, when no Cgroup limits are set is 256.\r\n    MaxRequestWorkers     256\r\n    ServerLimit           256\r\n    MaxRequestsPerChild   4000\r\n    MaxKeepAliveRequests  100\r\n</IfModule>"
  httpd.conf: "# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n\r\n# See the httpd.conf(5) man page for more information on this configuration,\r\n# and httpd.service(8) on using and configuring the httpd service.\r\n\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so 'log/access_log'\r\n# with ServerRoot set to '/www' will be interpreted by the\r\n# server as '/www/log/access_log', where as '/log/access_log' will be\r\n# interpreted as '/log/access_log'.\r\n\r\n\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n\r\nServerRoot \"/etc/httpd\"\r\n\r\n\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n\r\n#Listen 12.34.56.78:80\r\nListen 4444\r\n\r\n\r\n# Dynamic Shared Object (DSO) Support\r\n\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n\r\nInclude conf.modules.d/*.conf\r\n\r\n\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n\r\nUser apache\r\nGroup apache\r\n\r\n# 'Main' server configuration\r\n\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n\r\n\r\n\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n\r\nServerAdmin root@localhost\r\n\r\n\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n\r\n#ServerName www.example.com:80\r\n\r\n\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n\r\n<Directory />\r\n    Options FollowSymLinks\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n\r\n\r\n\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n\r\nDocumentRoot \"/var/www/html\"\r\n\r\n\r\n# Relax access to content within /var/www.\r\n\r\n<Directory \"/var/www\">\r\n    Options FollowSymLinks Indexes\r\n    AllowOverride All\r\n    # Allow open access:\r\n    Require all granted\r\n</Directory>\r\n\r\n# Further relax access to the default document root:\r\n<Directory \"/var/www/html\">\r\n    \r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    \r\n    Options Indexes FollowSymLinks\r\n\r\n    \r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   Options FileInfo AuthConfig Limit\r\n    \r\n    AllowOverride All\r\n\r\n    \r\n    # Controls who can get stuff from this server.\r\n    \r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n\r\nErrorLog \"logs/error.log\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    \r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    #CustomLog \"logs/access_log\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    \r\n    CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    \r\n    ScriptAlias /cgi-bin/ \"/var/www/cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n#\r\n# \"/var/www/cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n\r\n<Directory \"/var/www/cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    \r\n    TypesConfig /etc/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    \r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    \r\n    AddType text/html .shtml\r\n    AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# Specify a default charset for all content served; this enables\r\n# interpretation of all content as UTF-8 by default.  To use the\r\n# default browser choice (ISO-8859-1), or to allow the META tags\r\n# in HTML content to override this choice, comment out this\r\n# directive:\r\n\r\nAddDefaultCharset UTF-8\r\n\r\n<IfModule mime_magic_module>\r\n    #\r\n    # The mod_mime_magic module allows the server to use various hints from the\r\n    # contents of the file itself to determine its type.  The MIMEMagicFile\r\n    # directive tells the module where the hint definitions are located.\r\n    #\r\n    MIMEMagicFile conf/magic\r\n</IfModule>\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults if commented: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\nEnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# Load config files in the \"/etc/httpd/conf.d\" directory, if any.\r\nIncludeOptional conf.d/*.conf\r\nServerName 127.0.0.1\r\n"
  php.ini: "[PHP]\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n; About php.ini   ;\r\n;;;;;;;;;;;;;;;;;;;\r\n; PHP's initialization file, generally called php.ini, is responsible for\r\n; configuring many of the aspects of PHP's behavior.\r\n\r\n; PHP attempts to find and load this configuration from a number of locations.\r\n; The following is a summary of its search order:\r\n; 1. SAPI module specific location.\r\n; 2. The PHPRC environment variable. (As of PHP 5.2.0)\r\n; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)\r\n; 4. Current working directory (except CLI)\r\n; 5. The web server's directory (for SAPI modules), or directory of PHP\r\n; (otherwise in Windows)\r\n; 6. The directory from the --with-config-file-path compile time option, or the\r\n; Windows directory (C:\\windows or C:\\winnt)\r\n; See the PHP docs for more specific information.\r\n; http://php.net/configuration.file\r\n\r\n; The syntax of the file is extremely simple.  Whitespace and lines\r\n; beginning with a semicolon are silently ignored (as you probably guessed).\r\n; Section headers (e.g. [Foo]) are also silently ignored, even though\r\n; they might mean something in the future.\r\n\r\n; Directives following the section heading [PATH=/www/mysite] only\r\n; apply to PHP files in the /www/mysite directory.  Directives\r\n; following the section heading [HOST=www.example.com] only apply to\r\n; PHP files served from www.example.com.  Directives set in these\r\n; special sections cannot be overridden by user-defined INI files or\r\n; at runtime. Currently, [PATH=] and [HOST=] sections only work under\r\n; CGI/FastCGI.\r\n; http://php.net/ini.sections\r\n\r\n; Directives are specified using the following syntax:\r\n; directive = value\r\n; Directive names are *case sensitive* - foo=bar is different from FOO=bar.\r\n; Directives are variables used to configure PHP or PHP extensions.\r\n; There is no name validation.  If PHP can't find an expected\r\n; directive because it is not set or is mistyped, a default value will be used.\r\n\r\n; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one\r\n; of the INI constants (On, Off, True, False, Yes, No and None) or an expression\r\n; (e.g. E_ALL & ~E_NOTICE), a quoted string (\"bar\"), or a reference to a\r\n; previously set variable or directive (e.g. ${foo})\r\n\r\n; Expressions in the INI file are limited to bitwise operators and parentheses:\r\n; |  bitwise OR\r\n; ^  bitwise XOR\r\n; &  bitwise AND\r\n; ~  bitwise NOT\r\n; !  boolean NOT\r\n\r\n; Boolean flags can be turned on using the values 1, On, True or Yes.\r\n; They can be turned off using the values 0, Off, False or No.\r\n\r\n; An empty string can be denoted by simply not writing anything after the equal\r\n; sign, or by using the None keyword:\r\n\r\n;  foo =         ; sets foo to an empty string\r\n;  foo = None    ; sets foo to an empty string\r\n;  foo = \"None\"  ; sets foo to the string 'None'\r\n\r\n; If you use constants in your value, and these constants belong to a\r\n; dynamically loaded extension (either a PHP extension or a Zend extension),\r\n; you may only use these constants *after* the line that loads the extension.\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n; About this file ;\r\n;;;;;;;;;;;;;;;;;;;\r\n; PHP comes packaged with two INI files. One that is recommended to be used\r\n; in production environments and one that is recommended to be used in\r\n; development environments.\r\n\r\n; php.ini-production contains settings which hold security, performance and\r\n; best practices at its core. But please be aware, these settings may break\r\n; compatibility with older or less security conscience applications. We\r\n; recommending using the production ini in production and testing environments.\r\n\r\n; php.ini-development is very similar to its production variant, except it is\r\n; much more verbose when it comes to errors. We recommend using the\r\n; development version only in development environments, as errors shown to\r\n; application users can inadvertently leak otherwise secure information.\r\n\r\n; This is php.ini-production INI file.\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n; Quick Reference ;\r\n;;;;;;;;;;;;;;;;;;;\r\n; The following are all the settings which are different in either the production\r\n; or development versions of the INIs with respect to PHP's default behavior.\r\n; Please see the actual settings later in the document for more details as to why\r\n; we recommend these changes in PHP's behavior.\r\n\r\n; display_errors\r\n;   Default Value: On\r\n;   Development Value: On\r\n;   Production Value: Off\r\n\r\n; display_startup_errors\r\n;   Default Value: Off\r\n;   Development Value: On\r\n;   Production Value: Off\r\n\r\n; error_reporting\r\n;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\r\n;   Development Value: E_ALL\r\n;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\r\n\r\n; html_errors\r\n;   Default Value: On\r\n;   Development Value: On\r\n;   Production value: On\r\n\r\n; log_errors\r\n;   Default Value: Off\r\n;   Development Value: On\r\n;   Production Value: On\r\n\r\n; max_input_time\r\n;   Default Value: -1 (Unlimited)\r\n;   Development Value: 60 (60 seconds)\r\n;   Production Value: 60 (60 seconds)\r\n\r\n; output_buffering\r\n;   Default Value: Off\r\n;   Development Value: 4096\r\n;   Production Value: 4096\r\n\r\n; register_argc_argv\r\n;   Default Value: On\r\n;   Development Value: Off\r\n;   Production Value: Off\r\n\r\n; request_order\r\n;   Default Value: None\r\n;   Development Value: \"GP\"\r\n;   Production Value: \"GP\"\r\n\r\n; session.gc_divisor\r\n;   Default Value: 100\r\n;   Development Value: 1000\r\n;   Production Value: 1000\r\n\r\n; session.hash_bits_per_character\r\n;   Default Value: 4\r\n;   Development Value: 5\r\n;   Production Value: 5\r\n\r\n; short_open_tag\r\n;   Default Value: On\r\n;   Development Value: Off\r\n;   Production Value: Off\r\n\r\n; track_errors\r\n;   Default Value: Off\r\n;   Development Value: On\r\n;   Production Value: Off\r\n\r\n; url_rewriter.tags\r\n;   Default Value: \"a=href,area=href,frame=src,form=,fieldset=\"\r\n;   Development Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\r\n;   Production Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\r\n\r\n; variables_order\r\n;   Default Value: \"EGPCS\"\r\n;   Development Value: \"GPCS\"\r\n;   Production Value: \"GPCS\"\r\n\r\n;;;;;;;;;;;;;;;;;;;;\r\n; php.ini Options  ;\r\n;;;;;;;;;;;;;;;;;;;;\r\n; Name for user-defined php.ini (.htaccess) files. Default is \".user.ini\"\r\n;user_ini.filename = \".user.ini\"\r\n\r\n; To disable this feature set this option to empty value\r\n;user_ini.filename =\r\n\r\n; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)\r\n;user_ini.cache_ttl = 300\r\n\r\n;;;;;;;;;;;;;;;;;;;;\r\n; Language Options ;\r\n;;;;;;;;;;;;;;;;;;;;\r\n\r\n; Enable the PHP scripting language engine under Apache.\r\n; http://php.net/engine\r\nengine = On\r\n\r\n; This directive determines whether or not PHP will recognize code between\r\n; <? and ?> tags as PHP source which should be processed as such. It is\r\n; generally recommended that <?php and ?> should be used and that this feature\r\n; should be disabled, as enabling it may result in issues when generating XML\r\n; documents, however this remains supported for backward compatibility reasons.\r\n; Note that this directive does not control the <?= shorthand tag, which can be\r\n; used regardless of this directive.\r\n; Default Value: On\r\n; Development Value: Off\r\n; Production Value: Off\r\n; http://php.net/short-open-tag\r\nshort_open_tag = ON\r\n\r\n; The number of significant digits displayed in floating point numbers.\r\n; http://php.net/precision\r\nprecision = 14\r\n\r\n; Output buffering is a mechanism for controlling how much output data\r\n; (excluding headers and cookies) PHP should keep internally before pushing that\r\n; data to the client. If your application's output exceeds this setting, PHP\r\n; will send that data in chunks of roughly the size you specify.\r\n; Turning on this setting and managing its maximum buffer size can yield some\r\n; interesting side-effects depending on your application and web server.\r\n; You may be able to send headers and cookies after you've already sent output\r\n; through print or echo. You also may see performance benefits if your server is\r\n; emitting less packets due to buffered output versus PHP streaming the output\r\n; as it gets it. On production servers, 4096 bytes is a good setting for performance\r\n; reasons.\r\n; Note: Output buffering can also be controlled via Output Buffering Control\r\n;   functions.\r\n; Possible Values:\r\n;   On = Enabled and buffer is unlimited. (Use with caution)\r\n;   Off = Disabled\r\n;   Integer = Enables the buffer and sets its maximum size in bytes.\r\n; Note: This directive is hardcoded to Off for the CLI SAPI\r\n; Default Value: Off\r\n; Development Value: 4096\r\n; Production Value: 4096\r\n; http://php.net/output-buffering\r\noutput_buffering = 4096\r\n\r\n; You can redirect all of the output of your scripts to a function.  For\r\n; example, if you set output_handler to \"mb_output_handler\", character\r\n; encoding will be transparently converted to the specified encoding.\r\n; Setting any output handler automatically turns on output buffering.\r\n; Note: People who wrote portable scripts should not depend on this ini\r\n;   directive. Instead, explicitly set the output handler using ob_start().\r\n;   Using this ini directive may cause problems unless you know what script\r\n;   is doing.\r\n; Note: You cannot use both \"mb_output_handler\" with \"ob_iconv_handler\"\r\n;   and you cannot use both \"ob_gzhandler\" and \"zlib.output_compression\".\r\n; Note: output_handler must be empty if this is set 'On' !!!!\r\n;   Instead you must use zlib.output_handler.\r\n; http://php.net/output-handler\r\n;output_handler =\r\n\r\n; Transparent output compression using the zlib library\r\n; Valid values for this option are 'off', 'on', or a specific buffer size\r\n; to be used for compression (default is 4KB)\r\n; Note: Resulting chunk size may vary due to nature of compression. PHP\r\n;   outputs chunks that are few hundreds bytes each as a result of\r\n;   compression. If you prefer a larger chunk size for better\r\n;   performance, enable output_buffering in addition.\r\n; Note: You need to use zlib.output_handler instead of the standard\r\n;   output_handler, or otherwise the output will be corrupted.\r\n; http://php.net/zlib.output-compression\r\nzlib.output_compression = Off\r\n\r\n; http://php.net/zlib.output-compression-level\r\n;zlib.output_compression_level = -1\r\n\r\n; You cannot specify additional output handlers if zlib.output_compression\r\n; is activated here. This setting does the same as output_handler but in\r\n; a different order.\r\n; http://php.net/zlib.output-handler\r\n;zlib.output_handler =\r\n\r\n; Implicit flush tells PHP to tell the output layer to flush itself\r\n; automatically after every output block.  This is equivalent to calling the\r\n; PHP function flush() after each and every call to print() or echo() and each\r\n; and every HTML block.  Turning this option on has serious performance\r\n; implications and is generally recommended for debugging purposes only.\r\n; http://php.net/implicit-flush\r\n; Note: This directive is hardcoded to On for the CLI SAPI\r\nimplicit_flush = Off\r\n\r\n; The unserialize callback function will be called (with the undefined class'\r\n; name as parameter), if the unserializer finds an undefined class\r\n; which should be instantiated. A warning appears if the specified function is\r\n; not defined, or if the function doesn't include/implement the missing class.\r\n; So only set this entry, if you really want to implement such a\r\n; callback-function.\r\nunserialize_callback_func =\r\n\r\n; When floats & doubles are serialized, store serialize_precision significant\r\n; digits after the floating point. The default value ensures that when floats\r\n; are decoded with unserialize, the data will remain the same.\r\nserialize_precision = 17\r\n\r\n; open_basedir, if set, limits all file operations to the defined directory\r\n; and below.  This directive makes most sense if used in a per-directory\r\n; or per-virtualhost web server configuration file.\r\n; http://php.net/open-basedir\r\n;open_basedir =\r\n\r\n; This directive allows you to disable certain functions for security reasons.\r\n; It receives a comma-delimited list of function names.\r\n; http://php.net/disable-functions\r\ndisable_functions =\r\n\r\n; This directive allows you to disable certain classes for security reasons.\r\n; It receives a comma-delimited list of class names.\r\n; http://php.net/disable-classes\r\ndisable_classes =\r\n\r\n; Colors for Syntax Highlighting mode.  Anything that's acceptable in\r\n; <span style=\"color: ???????\"> would work.\r\n; http://php.net/syntax-highlighting\r\n;highlight.string  = #DD0000\r\n;highlight.comment = #FF9900\r\n;highlight.keyword = #007700\r\n;highlight.default = #0000BB\r\n;highlight.html    = #000000\r\n\r\n; If enabled, the request will be allowed to complete even if the user aborts\r\n; the request. Consider enabling it if executing long requests, which may end up\r\n; being interrupted by the user or a browser timing out. PHP's default behavior\r\n; is to disable this feature.\r\n; http://php.net/ignore-user-abort\r\n;ignore_user_abort = On\r\n\r\n; Determines the size of the realpath cache to be used by PHP. This value should\r\n; be increased on systems where PHP opens many files to reflect the quantity of\r\n; the file operations performed.\r\n; http://php.net/realpath-cache-size\r\n;realpath_cache_size = 4096k\r\n\r\n; Duration of time, in seconds for which to cache realpath information for a given\r\n; file or directory. For systems with rarely changing files, consider increasing this\r\n; value.\r\n; http://php.net/realpath-cache-ttl\r\n;realpath_cache_ttl = 120\r\n\r\n; Enables or disables the circular reference collector.\r\n; http://php.net/zend.enable-gc\r\nzend.enable_gc = On\r\n\r\n; If enabled, scripts may be written in encodings that are incompatible with\r\n; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such\r\n; encodings.  To use this feature, mbstring extension must be enabled.\r\n; Default: Off\r\n;zend.multibyte = Off\r\n\r\n; Allows to set the default encoding for the scripts.  This value will be used\r\n; unless \"declare(encoding=...)\" directive appears at the top of the script.\r\n; Only affects if zend.multibyte is set.\r\n; Default: \"\"\r\n;zend.script_encoding =\r\n\r\n;;;;;;;;;;;;;;;;;\r\n; Miscellaneous ;\r\n;;;;;;;;;;;;;;;;;\r\n\r\n; Decides whether PHP may expose the fact that it is installed on the server\r\n; (e.g. by adding its signature to the Web server header).  It is no security\r\n; threat in any way, but it makes it possible to determine whether you use PHP\r\n; on your server or not.\r\n; http://php.net/expose-php\r\nexpose_php = Off\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n; Resource Limits ;\r\n;;;;;;;;;;;;;;;;;;;\r\n\r\n; Maximum execution time of each script, in seconds\r\n; http://php.net/max-execution-time\r\n; Note: This directive is hardcoded to 0 for the CLI SAPI\r\nmax_execution_time = 300\r\n\r\n; Maximum amount of time each script may spend parsing request data. It's a good\r\n; idea to limit this time on productions servers in order to eliminate unexpectedly\r\n; long running scripts.\r\n; Note: This directive is hardcoded to -1 for the CLI SAPI\r\n; Default Value: -1 (Unlimited)\r\n; Development Value: 60 (60 seconds)\r\n; Production Value: 60 (60 seconds)\r\n; http://php.net/max-input-time\r\nmax_input_time = 60\r\n\r\n; Maximum input variable nesting level\r\n; http://php.net/max-input-nesting-level\r\n;max_input_nesting_level = 64\r\n\r\n; How many GET/POST/COOKIE input variables may be accepted\r\n; max_input_vars = 1000\r\n\r\n; Maximum amount of memory a script may consume (128MB)\r\n; http://php.net/memory-limit\r\nmemory_limit = 128M\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n; Error handling and logging ;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n; This directive informs PHP of which errors, warnings and notices you would like\r\n; it to take action for. The recommended way of setting values for this\r\n; directive is through the use of the error level constants and bitwise\r\n; operators. The error level constants are below here for convenience as well as\r\n; some common settings and their meanings.\r\n; By default, PHP is set to take action on all errors, notices and warnings EXCEPT\r\n; those related to E_NOTICE and E_STRICT, which together cover best practices and\r\n; recommended coding standards in PHP. For performance reasons, this is the\r\n; recommend error reporting setting. Your production server shouldn't be wasting\r\n; resources complaining about best practices and coding standards. That's what\r\n; development servers and development settings are for.\r\n; Note: The php.ini-development file has this setting as E_ALL. This\r\n; means it pretty much reports everything which is exactly what you want during\r\n; development and early testing.\r\n;\r\n; Error Level Constants:\r\n; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)\r\n; E_ERROR           - fatal run-time errors\r\n; E_RECOVERABLE_ERROR  - almost fatal run-time errors\r\n; E_WARNING         - run-time warnings (non-fatal errors)\r\n; E_PARSE           - compile-time parse errors\r\n; E_NOTICE          - run-time notices (these are warnings which often result\r\n;                     from a bug in your code, but it's possible that it was\r\n;                     intentional (e.g., using an uninitialized variable and\r\n;                     relying on the fact it is automatically initialized to an\r\n;                     empty string)\r\n; E_STRICT          - run-time notices, enable to have PHP suggest changes\r\n;                     to your code which will ensure the best interoperability\r\n;                     and forward compatibility of your code\r\n; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup\r\n; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's\r\n;                     initial startup\r\n; E_COMPILE_ERROR   - fatal compile-time errors\r\n; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)\r\n; E_USER_ERROR      - user-generated error message\r\n; E_USER_WARNING    - user-generated warning message\r\n; E_USER_NOTICE     - user-generated notice message\r\n; E_DEPRECATED      - warn about code that will not work in future versions\r\n;                     of PHP\r\n; E_USER_DEPRECATED - user-generated deprecation warnings\r\n;\r\n; Common Values:\r\n;   E_ALL (Show all errors, warnings and notices including coding standards.)\r\n;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\r\n;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)\r\n;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\r\n; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\r\n; Development Value: E_ALL\r\n; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\r\n; http://php.net/error-reporting\r\nerror_reporting = E_ALL & ~E_NOTICE\r\n\r\n; This directive controls whether or not and where PHP will output errors,\r\n; notices and warnings too. Error output is very useful during development, but\r\n; it could be very dangerous in production environments. Depending on the code\r\n; which is triggering the error, sensitive information could potentially leak\r\n; out of your application such as database usernames and passwords or worse.\r\n; For production environments, we recommend logging errors rather than\r\n; sending them to STDOUT.\r\n; Possible Values:\r\n;   Off = Do not display any errors\r\n;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)\r\n;   On or stdout = Display errors to STDOUT\r\n; Default Value: On\r\n; Development Value: On\r\n; Production Value: Off\r\n; http://php.net/display-errors\r\ndisplay_errors = ON\r\n\r\n; The display of errors which occur during PHP's startup sequence are handled\r\n; separately from display_errors. PHP's default behavior is to suppress those\r\n; errors from clients. Turning the display of startup errors on can be useful in\r\n; debugging configuration problems. We strongly recommend you\r\n; set this to 'off' for production servers.\r\n; Default Value: Off\r\n; Development Value: On\r\n; Production Value: Off\r\n; http://php.net/display-startup-errors\r\ndisplay_startup_errors = ON\r\n\r\n; Besides displaying errors, PHP can also log errors to locations such as a\r\n; server-specific log, STDERR, or a location specified by the error_log\r\n; directive found below. While errors should not be displayed on productions\r\n; servers they should still be monitored and logging is a great way to do that.\r\n; Default Value: Off\r\n; Development Value: On\r\n; Production Value: On\r\n; http://php.net/log-errors\r\nlog_errors = On\r\n\r\n; Set maximum length of log_errors. In error_log information about the source is\r\n; added. The default is 1024 and 0 allows to not apply any maximum length at all.\r\n; http://php.net/log-errors-max-len\r\nlog_errors_max_len = 1024\r\n\r\n; Do not log repeated messages. Repeated errors must occur in same file on same\r\n; line unless ignore_repeated_source is set true.\r\n; http://php.net/ignore-repeated-errors\r\nignore_repeated_errors = Off\r\n\r\n; Ignore source of message when ignoring repeated messages. When this setting\r\n; is On you will not log errors with repeated messages from different files or\r\n; source lines.\r\n; http://php.net/ignore-repeated-source\r\nignore_repeated_source = Off\r\n\r\n; If this parameter is set to Off, then memory leaks will not be shown (on\r\n; stdout or in the log). This has only effect in a debug compile, and if\r\n; error reporting includes E_WARNING in the allowed list\r\n; http://php.net/report-memleaks\r\nreport_memleaks = On\r\n\r\n; This setting is on by default.\r\n;report_zend_debug = 0\r\n\r\n; Store the last error/warning message in $php_errormsg (boolean). Setting this value\r\n; to On can assist in debugging and is appropriate for development servers. It should\r\n; however be disabled on production servers.\r\n; This directive is DEPRECATED.\r\n; Default Value: Off\r\n; Development Value: Off\r\n; Production Value: Off\r\n; http://php.net/track-errors\r\ntrack_errors = OFF\r\n\r\n; Turn off normal error reporting and emit XML-RPC error XML\r\n; http://php.net/xmlrpc-errors\r\n;xmlrpc_errors = 0\r\n\r\n; An XML-RPC faultCode\r\n;xmlrpc_error_number = 0\r\n\r\n; When PHP displays or logs an error, it has the capability of formatting the\r\n; error message as HTML for easier reading. This directive controls whether\r\n; the error message is formatted as HTML or not.\r\n; Note: This directive is hardcoded to Off for the CLI SAPI\r\n; Default Value: On\r\n; Development Value: On\r\n; Production value: On\r\n; http://php.net/html-errors\r\nhtml_errors = ON\r\n\r\n; If html_errors is set to On *and* docref_root is not empty, then PHP\r\n; produces clickable error messages that direct to a page describing the error\r\n; or function causing the error in detail.\r\n; You can download a copy of the PHP manual from http://php.net/docs\r\n; and change docref_root to the base URL of your local copy including the\r\n; leading '/'. You must also specify the file extension being used including\r\n; the dot. PHP's default behavior is to leave these settings empty, in which\r\n; case no links to documentation are generated.\r\n; Note: Never use this feature for production boxes.\r\n; http://php.net/docref-root\r\n; Examples\r\n;docref_root = \"/phpmanual/\"\r\n\r\n; http://php.net/docref-ext\r\n;docref_ext = .html\r\n\r\n; String to output before an error message. PHP's default behavior is to leave\r\n; this setting blank.\r\n; http://php.net/error-prepend-string\r\n; Example:\r\n;error_prepend_string = \"<span style='color: #ff0000'>\"\r\n\r\n; String to output after an error message. PHP's default behavior is to leave\r\n; this setting blank.\r\n; http://php.net/error-append-string\r\n; Example:\r\n;error_append_string = \"</span>\"\r\n\r\n; Log errors to specified file. PHP's default behavior is to leave this value\r\n; empty.\r\n; http://php.net/error-log\r\n; Example:\r\n;error_log = php_errors.log\r\n; Log errors to syslog.\r\n;error_log = syslog\r\n\r\n;windows.show_crt_warning\r\n; Default value: 0\r\n; Development value: 0\r\n; Production value: 0\r\n\r\n;;;;;;;;;;;;;;;;;\r\n; Data Handling ;\r\n;;;;;;;;;;;;;;;;;\r\n\r\n; The separator used in PHP generated URLs to separate arguments.\r\n; PHP's default setting is \"&\".\r\n; http://php.net/arg-separator.output\r\n; Example:\r\n;arg_separator.output = \"&amp;\"\r\n\r\n; List of separator(s) used by PHP to parse input URLs into variables.\r\n; PHP's default setting is \"&\".\r\n; NOTE: Every character in this directive is considered as separator!\r\n; http://php.net/arg-separator.input\r\n; Example:\r\n;arg_separator.input = \";&\"\r\n\r\n; This directive determines which super global arrays are registered when PHP\r\n; starts up. G,P,C,E & S are abbreviations for the following respective super\r\n; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty\r\n; paid for the registration of these arrays and because ENV is not as commonly\r\n; used as the others, ENV is not recommended on productions servers. You\r\n; can still get access to the environment variables through getenv() should you\r\n; need to.\r\n; Default Value: \"EGPCS\"\r\n; Development Value: \"GPCS\"\r\n; Production Value: \"GPCS\";\r\n; http://php.net/variables-order\r\nvariables_order = \"EGPCS\"\r\n\r\n; This directive determines which super global data (G,P & C) should be\r\n; registered into the super global array REQUEST. If so, it also determines\r\n; the order in which that data is registered. The values for this directive\r\n; are specified in the same manner as the variables_order directive,\r\n; EXCEPT one. Leaving this value empty will cause PHP to use the value set\r\n; in the variables_order directive. It does not mean it will leave the super\r\n; globals array REQUEST empty.\r\n; Default Value: None\r\n; Development Value: \"GP\"\r\n; Production Value: \"GP\"\r\n; http://php.net/request-order\r\nrequest_order = \"GP\"\r\n\r\n; This directive determines whether PHP registers $argv & $argc each time it\r\n; runs. $argv contains an array of all the arguments passed to PHP when a script\r\n; is invoked. $argc contains an integer representing the number of arguments\r\n; that were passed when the script was invoked. These arrays are extremely\r\n; useful when running scripts from the command line. When this directive is\r\n; enabled, registering these variables consumes CPU cycles and memory each time\r\n; a script is executed. For performance reasons, this feature should be disabled\r\n; on production servers.\r\n; Note: This directive is hardcoded to On for the CLI SAPI\r\n; Default Value: On\r\n; Development Value: Off\r\n; Production Value: Off\r\n; http://php.net/register-argc-argv\r\nregister_argc_argv = Off\r\n\r\n; When enabled, the ENV, REQUEST and SERVER variables are created when they're\r\n; first used (Just In Time) instead of when the script starts. If these\r\n; variables are not used within a script, having this directive on will result\r\n; in a performance gain. The PHP directive register_argc_argv must be disabled\r\n; for this directive to have any affect.\r\n; http://php.net/auto-globals-jit\r\nauto_globals_jit = On\r\n\r\n; Whether PHP will read the POST data.\r\n; This option is enabled by default.\r\n; Most likely, you won't want to disable this option globally. It causes $_POST\r\n; and $_FILES to always be empty; the only way you will be able to read the\r\n; POST data will be through the php://input stream wrapper. This can be useful\r\n; to proxy requests or to process the POST data in a memory efficient fashion.\r\n; http://php.net/enable-post-data-reading\r\n;enable_post_data_reading = Off\r\n\r\n; Maximum size of POST data that PHP will accept.\r\n; Its value may be 0 to disable the limit. It is ignored if POST data reading\r\n; is disabled through enable_post_data_reading.\r\n; http://php.net/post-max-size\r\npost_max_size = 200M\r\n\r\n; Automatically add files before PHP document.\r\n; http://php.net/auto-prepend-file\r\nauto_prepend_file =\r\n\r\n; Automatically add files after PHP document.\r\n; http://php.net/auto-append-file\r\nauto_append_file =\r\n\r\n; By default, PHP will output a character encoding using\r\n; the Content-type: header.  To disable sending of the charset, simply\r\n; set it to be empty.\r\n;\r\n; PHP's built-in default is text/html\r\n; http://php.net/default-mimetype\r\ndefault_mimetype = \"text/html\"\r\n\r\n; PHP's default character set is set to UTF-8.\r\n; http://php.net/default-charset\r\ndefault_charset = \"UTF-8\"\r\n\r\n; PHP internal character encoding is set to empty.\r\n; If empty, default_charset is used.\r\n; http://php.net/internal-encoding\r\n;internal_encoding =\r\n\r\n; PHP input character encoding is set to empty.\r\n; If empty, default_charset is used.\r\n; http://php.net/input-encoding\r\n;input_encoding =\r\n\r\n; PHP output character encoding is set to empty.\r\n; If empty, default_charset is used.\r\n; mbstring or iconv output handler is used.\r\n; See also output_buffer.\r\n; http://php.net/output-encoding\r\n;output_encoding =\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;\r\n; Paths and Directories ;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n; UNIX: \"/path1:/path2\"\r\n;include_path = \".:/php/includes\"\r\n;\r\n; Windows: \"\\path1;\\path2\"\r\n;include_path = \".;c:\\php\\includes\"\r\n;\r\n; PHP's default setting for include_path is \".;/path/to/php/pear\"\r\n; http://php.net/include-path\r\ninclude_path = .:/opt/app-root/src:/usr/share/pear\r\n\r\n; The root of the PHP pages, used only if nonempty.\r\n; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\r\n; if you are running php as a CGI under any web server (other than IIS)\r\n; see documentation for security issues.  The alternate is to use the\r\n; cgi.force_redirect configuration below\r\n; http://php.net/doc-root\r\ndoc_root =\r\n\r\n; The directory under which PHP opens the script using /~username used only\r\n; if nonempty.\r\n; http://php.net/user-dir\r\nuser_dir =\r\n\r\n; Directory in which the loadable extensions (modules) reside.\r\n; http://php.net/extension-dir\r\n; extension_dir = \"./\"\r\n; On windows:\r\n; extension_dir = \"ext\"\r\n\r\n; Directory where the temporary files should be placed.\r\n; Defaults to the system default (see sys_get_temp_dir)\r\n; sys_temp_dir = \"/tmp\"\r\n\r\n; Whether or not to enable the dl() function.  The dl() function does NOT work\r\n; properly in multithreaded servers, such as IIS or Zeus, and is automatically\r\n; disabled on them.\r\n; http://php.net/enable-dl\r\nenable_dl = Off\r\n\r\n; cgi.force_redirect is necessary to provide security running PHP as a CGI under\r\n; most web servers.  Left undefined, PHP turns this on by default.  You can\r\n; turn it off here AT YOUR OWN RISK\r\n; **You CAN safely turn this off for IIS, in fact, you MUST.**\r\n; http://php.net/cgi.force-redirect\r\n;cgi.force_redirect = 1\r\n\r\n; if cgi.nph is enabled it will force cgi to always sent Status: 200 with\r\n; every request. PHP's default behavior is to disable this feature.\r\n;cgi.nph = 1\r\n\r\n; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape\r\n; (iPlanet) web servers, you MAY need to set an environment variable name that PHP\r\n; will look for to know it is OK to continue execution.  Setting this variable MAY\r\n; cause security issues, KNOW WHAT YOU ARE DOING FIRST.\r\n; http://php.net/cgi.redirect-status-env\r\n;cgi.redirect_status_env =\r\n\r\n; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\r\n; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\r\n; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\r\n; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\r\n; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\r\n; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\r\n; http://php.net/cgi.fix-pathinfo\r\n;cgi.fix_pathinfo=1\r\n\r\n; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate\r\n; security tokens of the calling client.  This allows IIS to define the\r\n; security context that the request runs under.  mod_fastcgi under Apache\r\n; does not currently support this feature (03/17/2002)\r\n; Set to 1 if running under IIS.  Default is zero.\r\n; http://php.net/fastcgi.impersonate\r\n;fastcgi.impersonate = 1\r\n\r\n; Disable logging through FastCGI connection. PHP's default behavior is to enable\r\n; this feature.\r\n;fastcgi.logging = 0\r\n\r\n; cgi.rfc2616_headers configuration option tells PHP what type of headers to\r\n; use when sending HTTP response code. If set to 0, PHP sends Status: header that\r\n; is supported by Apache. When this option is set to 1, PHP will send\r\n; RFC2616 compliant header.\r\n; Default is zero.\r\n; http://php.net/cgi.rfc2616-headers\r\n;cgi.rfc2616_headers = 0\r\n\r\n;;;;;;;;;;;;;;;;\r\n; File Uploads ;\r\n;;;;;;;;;;;;;;;;\r\n\r\n; Whether to allow HTTP file uploads.\r\n; http://php.net/file-uploads\r\nfile_uploads = On\r\n\r\n; Temporary directory for HTTP uploaded files (will use system default if not\r\n; specified).\r\n; http://php.net/upload-tmp-dir\r\nupload_tmp_dir = /tmp\r\n\r\n; Maximum allowed size for uploaded files.\r\n; http://php.net/upload-max-filesize\r\nupload_max_filesize = 200M\r\n\r\n; Maximum number of files that can be uploaded via a single request\r\nmax_file_uploads = 20\r\n\r\n;;;;;;;;;;;;;;;;;;\r\n; Fopen wrappers ;\r\n;;;;;;;;;;;;;;;;;;\r\n\r\n; Whether to allow the treatment of URLs (like http:// or ftp://) as files.\r\n; http://php.net/allow-url-fopen\r\nallow_url_fopen = On\r\n\r\n; Whether to allow include/require to open URLs (like http:// or ftp://) as files.\r\n; http://php.net/allow-url-include\r\nallow_url_include = Off\r\n\r\n; Define the anonymous ftp password (your email address). PHP's default setting\r\n; for this is empty.\r\n; http://php.net/from\r\n;from=\"john@doe.com\"\r\n\r\n; Define the User-Agent string. PHP's default setting for this is empty.\r\n; http://php.net/user-agent\r\n;user_agent=\"PHP\"\r\n\r\n; Default timeout for socket based streams (seconds)\r\n; http://php.net/default-socket-timeout\r\ndefault_socket_timeout = 60\r\n\r\n; If your scripts have to deal with files from Macintosh systems,\r\n; or you are running on a Mac and need to deal with files from\r\n; unix or win32 systems, setting this flag will cause PHP to\r\n; automatically detect the EOL character in those files so that\r\n; fgets() and file() will work regardless of the source of the file.\r\n; http://php.net/auto-detect-line-endings\r\n;auto_detect_line_endings = Off\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n; Dynamic Extensions ;\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n; If you wish to have an extension loaded automatically, use the following\r\n; syntax:\r\n;\r\n;   extension=modulename\r\n;\r\n; For example:\r\n;\r\n;   extension=mysqli\r\n;\r\n; When the extension library to load is not located in the default extension\r\n; directory, You may specify an absolute path to the library file:\r\n;\r\n;   extension=/path/to/extension/mysqli.so\r\n;\r\n; Note : The syntax used in previous PHP versions ('extension=<ext>.so' and\r\n; 'extension='php_<ext>.dll') is supported for legacy reasons and may be\r\n; deprecated in a future PHP major version. So, when it is possible, please\r\n; move to the new ('extension=<ext>) syntax.\r\n\r\n;;;;\r\n; Note: packaged extension modules are now loaded via the .ini files\r\n; found in the directory /etc/php.d; these are loaded by default.\r\n;;;;\r\n\r\n;;;;;;;;;;;;;;;;;;;\r\n; Module Settings ;\r\n;;;;;;;;;;;;;;;;;;;\r\n\r\n[CLI Server]\r\n; Whether the CLI web server uses ANSI color coding in its terminal output.\r\ncli_server.color = On\r\n\r\n[Date]\r\n; Defines the default timezone used by the date functions\r\n; http://php.net/date.timezone\r\ndate.timezone = \"UTC\"\r\n\r\n; http://php.net/date.default-latitude\r\n;date.default_latitude = 31.7667\r\n\r\n; http://php.net/date.default-longitude\r\n;date.default_longitude = 35.2333\r\n\r\n; http://php.net/date.sunrise-zenith\r\n;date.sunrise_zenith = 90.583333\r\n\r\n; http://php.net/date.sunset-zenith\r\n;date.sunset_zenith = 90.583333\r\n\r\n[filter]\r\n; http://php.net/filter.default\r\n;filter.default = unsafe_raw\r\n\r\n; http://php.net/filter.default-flags\r\n;filter.default_flags =\r\n\r\n[iconv]\r\n; Use of this INI entry is deprecated, use global input_encoding instead.\r\n; If empty, default_charset or input_encoding or iconv.input_encoding is used.\r\n; The precedence is: default_charset < intput_encoding < iconv.input_encoding\r\n;iconv.input_encoding =\r\n\r\n; Use of this INI entry is deprecated, use global internal_encoding instead.\r\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\r\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\r\n;iconv.internal_encoding =\r\n\r\n; Use of this INI entry is deprecated, use global output_encoding instead.\r\n; If empty, default_charset or output_encoding or iconv.output_encoding is used.\r\n; The precedence is: default_charset < output_encoding < iconv.output_encoding\r\n; To use an output encoding conversion, iconv's output handler must be set\r\n; otherwise output encoding conversion cannot be performed.\r\n;iconv.output_encoding =\r\n\r\n[intl]\r\n;intl.default_locale =\r\n; This directive allows you to produce PHP errors when some error\r\n; happens within intl functions. The value is the level of the error produced.\r\n; Default is 0, which does not produce any errors.\r\n;intl.error_level = E_WARNING\r\n\r\n[sqlite]\r\n; http://php.net/sqlite.assoc-case\r\n;sqlite.assoc_case = 0\r\n\r\n[sqlite3]\r\n;sqlite3.extension_dir =\r\n\r\n[Pcre]\r\n;PCRE library backtracking limit.\r\n; http://php.net/pcre.backtrack-limit\r\n;pcre.backtrack_limit=100000\r\n\r\n;PCRE library recursion limit.\r\n;Please note that if you set this value to a high number you may consume all\r\n;the available process stack and eventually crash PHP (due to reaching the\r\n;stack size limit imposed by the Operating System).\r\n; http://php.net/pcre.recursion-limit\r\n;pcre.recursion_limit=100000\r\n\r\n;Enables or disables JIT compilation of patterns. This requires the PCRE\r\n;library to be compiled with JIT support.\r\n;pcre.jit=1\r\n\r\n[Pdo]\r\n; Whether to pool ODBC connections. Can be one of \"strict\", \"relaxed\" or \"off\"\r\n; http://php.net/pdo-odbc.connection-pooling\r\n;pdo_odbc.connection_pooling=strict\r\n\r\n;pdo_odbc.db2_instance_name\r\n\r\n[Pdo_mysql]\r\n; If mysqlnd is used: Number of cache slots for the internal result set cache\r\n; http://php.net/pdo_mysql.cache_size\r\npdo_mysql.cache_size = 2000\r\n\r\n; Default socket name for local MySQL connects.  If empty, uses the built-in\r\n; MySQL defaults.\r\n; http://php.net/pdo_mysql.default-socket\r\npdo_mysql.default_socket=\r\n\r\n[Phar]\r\n; http://php.net/phar.readonly\r\n;phar.readonly = On\r\n\r\n; http://php.net/phar.require-hash\r\n;phar.require_hash = On\r\n\r\n;phar.cache_list =\r\n\r\n[mail function]\r\n; For Unix only.  You may supply arguments as well (default: \"sendmail -t -i\").\r\n; http://php.net/sendmail-path\r\nsendmail_path = /usr/sbin/sendmail -t -i\r\n\r\n; Force the addition of the specified parameters to be passed as extra parameters\r\n; to the sendmail binary. These parameters will always replace the value of\r\n; the 5th parameter to mail().\r\n;mail.force_extra_parameters =\r\n\r\n; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename\r\nmail.add_x_header = On\r\n\r\n; The path to a log file that will log all mail() calls. Log entries include\r\n; the full path of the script, line number, To address and headers.\r\n;mail.log =\r\n; Log mail to syslog;\r\n;mail.log = syslog\r\n\r\n[ODBC]\r\n; http://php.net/odbc.default-db\r\n;odbc.default_db    =  Not yet implemented\r\n\r\n; http://php.net/odbc.default-user\r\n;odbc.default_user  =  Not yet implemented\r\n\r\n; http://php.net/odbc.default-pw\r\n;odbc.default_pw    =  Not yet implemented\r\n\r\n; Controls the ODBC cursor model.\r\n; Default: SQL_CURSOR_STATIC (default).\r\n;odbc.default_cursortype\r\n\r\n; Allow or prevent persistent links.\r\n; http://php.net/odbc.allow-persistent\r\nodbc.allow_persistent = On\r\n\r\n; Check that a connection is still valid before reuse.\r\n; http://php.net/odbc.check-persistent\r\nodbc.check_persistent = On\r\n\r\n; Maximum number of persistent links.  -1 means no limit.\r\n; http://php.net/odbc.max-persistent\r\nodbc.max_persistent = -1\r\n\r\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\r\n; http://php.net/odbc.max-links\r\nodbc.max_links = -1\r\n\r\n; Handling of LONG fields.  Returns number of bytes to variables.  0 means\r\n; passthru.\r\n; http://php.net/odbc.defaultlrl\r\nodbc.defaultlrl = 4096\r\n\r\n; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.\r\n; See the documentation on odbc_binmode and odbc_longreadlen for an explanation\r\n; of odbc.defaultlrl and odbc.defaultbinmode\r\n; http://php.net/odbc.defaultbinmode\r\nodbc.defaultbinmode = 1\r\n\r\n;birdstep.max_links = -1\r\n\r\n[Interbase]\r\n; Allow or prevent persistent links.\r\nibase.allow_persistent = 1\r\n\r\n; Maximum number of persistent links.  -1 means no limit.\r\nibase.max_persistent = -1\r\n\r\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\r\nibase.max_links = -1\r\n\r\n; Default database name for ibase_connect().\r\n;ibase.default_db =\r\n\r\n; Default username for ibase_connect().\r\n;ibase.default_user =\r\n\r\n; Default password for ibase_connect().\r\n;ibase.default_password =\r\n\r\n; Default charset for ibase_connect().\r\n;ibase.default_charset =\r\n\r\n; Default timestamp format.\r\nibase.timestampformat = \"%Y-%m-%d %H:%M:%S\"\r\n\r\n; Default date format.\r\nibase.dateformat = \"%Y-%m-%d\"\r\n\r\n; Default time format.\r\nibase.timeformat = \"%H:%M:%S\"\r\n\r\n[MySQLi]\r\n\r\n; Maximum number of persistent links.  -1 means no limit.\r\n; http://php.net/mysqli.max-persistent\r\nmysqli.max_persistent = -1\r\n\r\n; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\r\n; http://php.net/mysqli.allow_local_infile\r\n;mysqli.allow_local_infile = On\r\n\r\n; Allow or prevent persistent links.\r\n; http://php.net/mysqli.allow-persistent\r\nmysqli.allow_persistent = On\r\n\r\n; Maximum number of links.  -1 means no limit.\r\n; http://php.net/mysqli.max-links\r\nmysqli.max_links = -1\r\n\r\n; If mysqlnd is used: Number of cache slots for the internal result set cache\r\n; http://php.net/mysqli.cache_size\r\nmysqli.cache_size = 2000\r\n\r\n; Default port number for mysqli_connect().  If unset, mysqli_connect() will use\r\n; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the\r\n; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look\r\n; at MYSQL_PORT.\r\n; http://php.net/mysqli.default-port\r\nmysqli.default_port = 3306\r\n\r\n; Default socket name for local MySQL connects.  If empty, uses the built-in\r\n; MySQL defaults.\r\n; http://php.net/mysqli.default-socket\r\nmysqli.default_socket =\r\n\r\n; Default host for mysql_connect() (doesn't apply in safe mode).\r\n; http://php.net/mysqli.default-host\r\nmysqli.default_host =\r\n\r\n; Default user for mysql_connect() (doesn't apply in safe mode).\r\n; http://php.net/mysqli.default-user\r\nmysqli.default_user =\r\n\r\n; Default password for mysqli_connect() (doesn't apply in safe mode).\r\n; Note that this is generally a *bad* idea to store passwords in this file.\r\n; *Any* user with PHP access can run 'echo get_cfg_var(\"mysqli.default_pw\")\r\n; and reveal this password!  And of course, any users with read access to this\r\n; file will be able to reveal the password as well.\r\n; http://php.net/mysqli.default-pw\r\nmysqli.default_pw =\r\n\r\n; Allow or prevent reconnect\r\nmysqli.reconnect = Off\r\n\r\n[mysqlnd]\r\n; Enable / Disable collection of general statistics by mysqlnd which can be\r\n; used to tune and monitor MySQL operations.\r\n; http://php.net/mysqlnd.collect_statistics\r\nmysqlnd.collect_statistics = On\r\n\r\n; Enable / Disable collection of memory usage statistics by mysqlnd which can be\r\n; used to tune and monitor MySQL operations.\r\n; http://php.net/mysqlnd.collect_memory_statistics\r\nmysqlnd.collect_memory_statistics = Off\r\n\r\n; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.\r\n; http://php.net/mysqlnd.net_cmd_buffer_size\r\n;mysqlnd.net_cmd_buffer_size = 2048\r\n\r\n; Size of a pre-allocated buffer used for reading data sent by the server in\r\n; bytes.\r\n; http://php.net/mysqlnd.net_read_buffer_size\r\n;mysqlnd.net_read_buffer_size = 32768\r\n\r\n[PostgreSQL]\r\n; Allow or prevent persistent links.\r\n; http://php.net/pgsql.allow-persistent\r\npgsql.allow_persistent = On\r\n\r\n; Detect broken persistent links always with pg_pconnect().\r\n; Auto reset feature requires a little overheads.\r\n; http://php.net/pgsql.auto-reset-persistent\r\npgsql.auto_reset_persistent = Off\r\n\r\n; Maximum number of persistent links.  -1 means no limit.\r\n; http://php.net/pgsql.max-persistent\r\npgsql.max_persistent = -1\r\n\r\n; Maximum number of links (persistent+non persistent).  -1 means no limit.\r\n; http://php.net/pgsql.max-links\r\npgsql.max_links = -1\r\n\r\n; Ignore PostgreSQL backends Notice message or not.\r\n; Notice message logging require a little overheads.\r\n; http://php.net/pgsql.ignore-notice\r\npgsql.ignore_notice = 0\r\n\r\n; Log PostgreSQL backends Notice message or not.\r\n; Unless pgsql.ignore_notice=0, module cannot log notice message.\r\n; http://php.net/pgsql.log-notice\r\npgsql.log_notice = 0\r\n\r\n[bcmath]\r\n; Number of decimal digits for all bcmath functions.\r\n; http://php.net/bcmath.scale\r\nbcmath.scale = 0\r\n\r\n[browscap]\r\n; http://php.net/browscap\r\n;browscap = extra/browscap.ini\r\n\r\n[Session]\r\n; Handler used to store/retrieve data.\r\n; http://php.net/session.save-handler\r\nsession.save_handler = files\r\n\r\n; Argument passed to save_handler.  In the case of files, this is the path\r\n; where data files are stored. Note: Windows users have to change this\r\n; variable in order to use PHP's session functions.\r\n;\r\n; The path can be defined as:\r\n;\r\n;     session.save_path = \"N;/path\"\r\n;\r\n; where N is an integer.  Instead of storing all the session files in\r\n; /path, what this will do is use subdirectories N-levels deep, and\r\n; store the session data in those directories.  This is useful if\r\n; your OS has problems with many files in one directory, and is\r\n; a more efficient layout for servers that handle many sessions.\r\n;\r\n; NOTE 1: PHP will not create this directory structure automatically.\r\n;         You can use the script in the ext/session dir for that purpose.\r\n; NOTE 2: See the section on garbage collection below if you choose to\r\n;         use subdirectories for session storage\r\n;\r\n; The file storage module creates files using mode 600 by default.\r\n; You can change that by using\r\n;\r\n;     session.save_path = \"N;MODE;/path\"\r\n;\r\n; where MODE is the octal representation of the mode. Note that this\r\n; does not overwrite the process's umask.\r\n; http://php.net/session.save-path\r\n\r\n; RPM note : session directory must be owned by process owner\r\n; for mod_php, see /etc/httpd/conf.d/php.conf\r\n; for php-fpm, see /etc/php-fpm.d/*conf\r\nsession.save_path = /tmp/sessions\r\n\r\n; Whether to use strict session mode.\r\n; Strict session mode does not accept uninitialized session ID and regenerate\r\n; session ID if browser sends uninitialized session ID. Strict mode protects\r\n; applications from session fixation via session adoption vulnerability. It is\r\n; disabled by default for maximum compatibility, but enabling it is encouraged.\r\n; https://wiki.php.net/rfc/strict_sessions\r\nsession.use_strict_mode = 0\r\n\r\n; Whether to use cookies.\r\n; http://php.net/session.use-cookies\r\nsession.use_cookies = 1\r\n\r\n; http://php.net/session.cookie-secure\r\nsession.cookie_secure = 0\r\n\r\n; This option forces PHP to fetch and use a cookie for storing and maintaining\r\n; the session id. We encourage this operation as it's very helpful in combating\r\n; session hijacking when not specifying and managing your own session id. It is\r\n; not the be-all and end-all of session hijacking defense, but it's a good start.\r\n; http://php.net/session.use-only-cookies\r\nsession.use_only_cookies = 1\r\n\r\n; Name of the session (used as cookie name).\r\n; http://php.net/session.name\r\nsession.name = PHPSESSID\r\n\r\n; Initialize session on request startup.\r\n; http://php.net/session.auto-start\r\nsession.auto_start = 0\r\n\r\n; Lifetime in seconds of cookie or, if 0, until browser is restarted.\r\n; http://php.net/session.cookie-lifetime\r\nsession.cookie_lifetime = 0\r\n\r\n; The path for which the cookie is valid.\r\n; http://php.net/session.cookie-path\r\nsession.cookie_path = /\r\n\r\n; The domain for which the cookie is valid.\r\n; http://php.net/session.cookie-domain\r\nsession.cookie_domain =\r\n\r\n; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.\r\n; http://php.net/session.cookie-httponly\r\nsession.cookie_httponly =\r\n\r\n; Handler used to serialize data.  php is the standard serializer of PHP.\r\n; http://php.net/session.serialize-handler\r\nsession.serialize_handler = php\r\n\r\n; Defines the probability that the 'garbage collection' process is started\r\n; on every session initialization. The probability is calculated by using\r\n; gc_probability/gc_divisor. Where session.gc_probability is the numerator\r\n; and gc_divisor is the denominator in the equation. Setting this value to 1\r\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\r\n; the gc will run on any give request.\r\n; Default Value: 1\r\n; Development Value: 1\r\n; Production Value: 1\r\n; http://php.net/session.gc-probability\r\nsession.gc_probability = 1\r\n\r\n; Defines the probability that the 'garbage collection' process is started on every\r\n; session initialization. The probability is calculated by using the following equation:\r\n; gc_probability/gc_divisor. Where session.gc_probability is the numerator and\r\n; session.gc_divisor is the denominator in the equation. Setting this value to 1\r\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\r\n; the gc will run on any give request. Increasing this value to 1000 will give you\r\n; a 0.1% chance the gc will run on any give request. For high volume production servers,\r\n; this is a more efficient approach.\r\n; Default Value: 100\r\n; Development Value: 1000\r\n; Production Value: 1000\r\n; http://php.net/session.gc-divisor\r\nsession.gc_divisor = 1000\r\n\r\n; After this number of seconds, stored data will be seen as 'garbage' and\r\n; cleaned up by the garbage collection process.\r\n; http://php.net/session.gc-maxlifetime\r\nsession.gc_maxlifetime = 1440\r\n\r\n; NOTE: If you are using the subdirectory option for storing session files\r\n;       (see session.save_path above), then garbage collection does *not*\r\n;       happen automatically.  You will need to do your own garbage\r\n;       collection through a shell script, cron entry, or some other method.\r\n;       For example, the following script would is the equivalent of\r\n;       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):\r\n;          find /path/to/sessions -cmin +24 -type f | xargs rm\r\n\r\n; Check HTTP Referer to invalidate externally stored URLs containing ids.\r\n; HTTP_REFERER has to contain this substring for the session to be\r\n; considered as valid.\r\n; http://php.net/session.referer-check\r\nsession.referer_check =\r\n\r\n; How many bytes to read from the file.\r\n; http://php.net/session.entropy-length\r\n;session.entropy_length = 32\r\n\r\n; Specified here to create the session id.\r\n; http://php.net/session.entropy-file\r\n; Defaults to /dev/urandom\r\n; On systems that don't have /dev/urandom but do have /dev/arandom, this will default to /dev/arandom\r\n; If neither are found at compile time, the default is no entropy file.\r\n; On windows, setting the entropy_length setting will activate the\r\n; Windows random source (using the CryptoAPI)\r\n;session.entropy_file = /dev/urandom\r\n\r\n; Set to {nocache,private,public,} to determine HTTP caching aspects\r\n; or leave this empty to avoid sending anti-caching headers.\r\n; http://php.net/session.cache-limiter\r\nsession.cache_limiter = nocache\r\n\r\n; Document expires after n minutes.\r\n; http://php.net/session.cache-expire\r\nsession.cache_expire = 180\r\n\r\n; trans sid support is disabled by default.\r\n; Use of trans sid may risk your users' security.\r\n; Use this option with caution.\r\n; - User may send URL contains active session ID\r\n;   to other person via. email/irc/etc.\r\n; - URL that contains active session ID may be stored\r\n;   in publicly accessible computer.\r\n; - User may access your site with the same session ID\r\n;   always using URL stored in browser's history or bookmarks.\r\n; http://php.net/session.use-trans-sid\r\nsession.use_trans_sid = 0\r\n\r\n; Select a hash function for use in generating session ids.\r\n; Possible Values\r\n;   0  (MD5 128 bits)\r\n;   1  (SHA-1 160 bits)\r\n; This option may also be set to the name of any hash function supported by\r\n; the hash extension. A list of available hashes is returned by the hash_algos()\r\n; function.\r\n; http://php.net/session.hash-function\r\nsession.hash_function = 0\r\n\r\n; Define how many bits are stored in each character when converting\r\n; the binary hash data to something readable.\r\n; Possible values:\r\n;   4  (4 bits: 0-9, a-f)\r\n;   5  (5 bits: 0-9, a-v)\r\n;   6  (6 bits: 0-9, a-z, A-Z, \"-\", \",\")\r\n; Default Value: 4\r\n; Development Value: 5\r\n; Production Value: 5\r\n; http://php.net/session.hash-bits-per-character\r\nsession.hash_bits_per_character = 5\r\n\r\n; The URL rewriter will look for URLs in a defined set of HTML tags.\r\n; form/fieldset are special; if you include them here, the rewriter will\r\n; add a hidden <input> field with the info which is otherwise appended\r\n; to URLs.  If you want XHTML conformity, remove the form entry.\r\n; Note that all valid entries require a \"=\", even if no value follows.\r\n; Default Value: \"a=href,area=href,frame=src,form=,fieldset=\"\r\n; Development Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\r\n; Production Value: \"a=href,area=href,frame=src,input=src,form=fakeentry\"\r\n; http://php.net/url-rewriter.tags\r\nurl_rewriter.tags = \"a=href,area=href,frame=src,input=src,form=fakeentry\"\r\n\r\n; Enable upload progress tracking in $_SESSION\r\n; Default Value: On\r\n; Development Value: On\r\n; Production Value: On\r\n; http://php.net/session.upload-progress.enabled\r\n;session.upload_progress.enabled = On\r\n\r\n; Cleanup the progress information as soon as all POST data has been read\r\n; (i.e. upload completed).\r\n; Default Value: On\r\n; Development Value: On\r\n; Production Value: On\r\n; http://php.net/session.upload-progress.cleanup\r\n;session.upload_progress.cleanup = On\r\n\r\n; A prefix used for the upload progress key in $_SESSION\r\n; Default Value: \"upload_progress_\"\r\n; Development Value: \"upload_progress_\"\r\n; Production Value: \"upload_progress_\"\r\n; http://php.net/session.upload-progress.prefix\r\n;session.upload_progress.prefix = \"upload_progress_\"\r\n\r\n; The index name (concatenated with the prefix) in $_SESSION\r\n; containing the upload progress information\r\n; Default Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\r\n; Development Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\r\n; Production Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\r\n; http://php.net/session.upload-progress.name\r\n;session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"\r\n\r\n; How frequently the upload progress should be updated.\r\n; Given either in percentages (per-file), or in bytes\r\n; Default Value: \"1%\"\r\n; Development Value: \"1%\"\r\n; Production Value: \"1%\"\r\n; http://php.net/session.upload-progress.freq\r\n;session.upload_progress.freq =  \"1%\"\r\n\r\n; The minimum delay between updates, in seconds\r\n; Default Value: 1\r\n; Development Value: 1\r\n; Production Value: 1\r\n; http://php.net/session.upload-progress.min-freq\r\n;session.upload_progress.min_freq = \"1\"\r\n\r\n[Assertion]\r\n; Switch whether to compile assertions at all (to have no overhead at run-time)\r\n; -1: Do not compile at all\r\n;  0: Jump over assertion at run-time\r\n;  1: Execute assertions\r\n; Changing from or to a negative value is only possible in php.ini! (For turning assertions on and off at run-time, see assert.active, when zend.assertions = 1)\r\n; Default Value: 1\r\n; Development Value: 1\r\n; Production Value: -1\r\n; http://php.net/zend.assertions\r\nzend.assertions = -1\r\n\r\n; Assert(expr); active by default.\r\n; http://php.net/assert.active\r\n;assert.active = On\r\n\r\n; Throw an AssertationException on failed assertions\r\n; http://php.net/assert.exception\r\n;assert.exception = On\r\n\r\n; Issue a PHP warning for each failed assertion. (Overridden by assert.exception if active)\r\n; http://php.net/assert.warning\r\n;assert.warning = On\r\n\r\n; Don't bail out by default.\r\n; http://php.net/assert.bail\r\n;assert.bail = Off\r\n\r\n; User-function to be called if an assertion fails.\r\n; http://php.net/assert.callback\r\n;assert.callback = 0\r\n\r\n; Eval the expression with current error_reporting().  Set to true if you want\r\n; error_reporting(0) around the eval().\r\n; http://php.net/assert.quiet-eval\r\n;assert.quiet_eval = 0\r\n\r\n[mbstring]\r\n; language for internal character representation.\r\n; This affects mb_send_mail() and mbstring.detect_order.\r\n; http://php.net/mbstring.language\r\n;mbstring.language = Japanese\r\n\r\n; Use of this INI entry is deprecated, use global internal_encoding instead.\r\n; internal/script encoding.\r\n; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*)\r\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\r\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\r\n;mbstring.internal_encoding =\r\n\r\n; Use of this INI entry is deprecated, use global input_encoding instead.\r\n; http input encoding.\r\n; mbstring.encoding_traslation = On is needed to use this setting.\r\n; If empty, default_charset or input_encoding or mbstring.input is used.\r\n; The precedence is: default_charset < intput_encoding < mbsting.http_input\r\n; http://php.net/mbstring.http-input\r\n;mbstring.http_input =\r\n\r\n; Use of this INI entry is deprecated, use global output_encoding instead.\r\n; http output encoding.\r\n; mb_output_handler must be registered as output buffer to function.\r\n; If empty, default_charset or output_encoding or mbstring.http_output is used.\r\n; The precedence is: default_charset < output_encoding < mbstring.http_output\r\n; To use an output encoding conversion, mbstring's output handler must be set\r\n; otherwise output encoding conversion cannot be performed.\r\n; http://php.net/mbstring.http-output\r\n;mbstring.http_output =\r\n\r\n; enable automatic encoding translation according to\r\n; mbstring.internal_encoding setting. Input chars are\r\n; converted to internal encoding by setting this to On.\r\n; Note: Do _not_ use automatic encoding translation for\r\n;       portable libs/applications.\r\n; http://php.net/mbstring.encoding-translation\r\n;mbstring.encoding_translation = Off\r\n\r\n; automatic encoding detection order.\r\n; \"auto\" detect order is changed according to mbstring.language\r\n; http://php.net/mbstring.detect-order\r\n;mbstring.detect_order = auto\r\n\r\n; substitute_character used when character cannot be converted\r\n; one from another\r\n; http://php.net/mbstring.substitute-character\r\n;mbstring.substitute_character = none\r\n\r\n; overload(replace) single byte functions by mbstring functions.\r\n; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),\r\n; etc. Possible values are 0,1,2,4 or combination of them.\r\n; For example, 7 for overload everything.\r\n; 0: No overload\r\n; 1: Overload mail() function\r\n; 2: Overload str*() functions\r\n; 4: Overload ereg*() functions\r\n; http://php.net/mbstring.func-overload\r\n;mbstring.func_overload = 0\r\n\r\n; enable strict encoding detection.\r\n; Default: Off\r\n;mbstring.strict_detection = On\r\n\r\n; This directive specifies the regex pattern of content types for which mb_output_handler()\r\n; is activated.\r\n; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\\+xml)\r\n;mbstring.http_output_conv_mimetype=\r\n\r\n[gd]\r\n; Tell the jpeg decode to ignore warnings and try to create\r\n; a gd image. The warning will then be displayed as notices\r\n; disabled by default\r\n; http://php.net/gd.jpeg-ignore-warning\r\n;gd.jpeg_ignore_warning = 0\r\n\r\n[exif]\r\n; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.\r\n; With mbstring support this will automatically be converted into the encoding\r\n; given by corresponding encode setting. When empty mbstring.internal_encoding\r\n; is used. For the decode settings you can distinguish between motorola and\r\n; intel byte order. A decode setting cannot be empty.\r\n; http://php.net/exif.encode-unicode\r\n;exif.encode_unicode = ISO-8859-15\r\n\r\n; http://php.net/exif.decode-unicode-motorola\r\n;exif.decode_unicode_motorola = UCS-2BE\r\n\r\n; http://php.net/exif.decode-unicode-intel\r\n;exif.decode_unicode_intel    = UCS-2LE\r\n\r\n; http://php.net/exif.encode-jis\r\n;exif.encode_jis =\r\n\r\n; http://php.net/exif.decode-jis-motorola\r\n;exif.decode_jis_motorola = JIS\r\n\r\n; http://php.net/exif.decode-jis-intel\r\n;exif.decode_jis_intel    = JIS\r\n\r\n[Tidy]\r\n; The path to a default tidy configuration file to use when using tidy\r\n; http://php.net/tidy.default-config\r\n;tidy.default_config = /usr/local/lib/php/default.tcfg\r\n\r\n; Should tidy clean and repair output automatically?\r\n; WARNING: Do not use this option if you are generating non-html content\r\n; such as dynamic images\r\n; http://php.net/tidy.clean-output\r\ntidy.clean_output = Off\r\n\r\n[soap]\r\n; Enables or disables WSDL caching feature.\r\n; http://php.net/soap.wsdl-cache-enabled\r\nsoap.wsdl_cache_enabled=1\r\n\r\n; Sets the directory name where SOAP extension will put cache files.\r\n; http://php.net/soap.wsdl-cache-dir\r\n\r\n; RPM note : cache directory must be owned by process owner\r\n; for mod_php, see /etc/httpd/conf.d/php.conf\r\n; for php-fpm, see /etc/php-fpm.d/*conf\r\nsoap.wsdl_cache_dir=\"/tmp\"\r\n\r\n; (time to live) Sets the number of second while cached file will be used\r\n; instead of original one.\r\n; http://php.net/soap.wsdl-cache-ttl\r\nsoap.wsdl_cache_ttl=86400\r\n\r\n; Sets the size of the cache limit. (Max. number of WSDL files to cache)\r\nsoap.wsdl_cache_limit = 5\r\n\r\n[sysvshm]\r\n; A default size of the shared memory segment\r\n;sysvshm.init_mem = 10000\r\n\r\n[ldap]\r\n; Sets the maximum number of open links or -1 for unlimited.\r\nldap.max_links = -1\r\n\r\n[dba]\r\n;dba.default_handler=\r\n\r\n[curl]\r\n; A default value for the CURLOPT_CAINFO option. This is required to be an\r\n; absolute path.\r\n;curl.cainfo =\r\n\r\n[openssl]\r\n; The location of a Certificate Authority (CA) file on the local filesystem\r\n; to use when verifying the identity of SSL/TLS peers. Most users should\r\n; not specify a value for this directive as PHP will attempt to use the\r\n; OS-managed cert stores in its absence. If specified, this value may still\r\n; be overridden on a per-stream basis via the \"cafile\" SSL stream context\r\n; option.\r\n;openssl.cafile=\r\n\r\n; If openssl.cafile is not specified or if the CA file is not found, the\r\n; directory pointed to by openssl.capath is searched for a suitable\r\n; certificate. This value must be a correctly hashed certificate directory.\r\n; Most users should not specify a value for this directive as PHP will\r\n; attempt to use the OS-managed cert stores in its absence. If specified,\r\n; this value may still be overridden on a per-stream basis via the \"capath\"\r\n; SSL stream context option.\r\n;openssl.capath=\r\n\r\n; Local Variables:\r\n; tab-width: 4\r\n; End:\r\n\r\nextension=oci8\r\n;extension=pdo_oci\r\n"
